# -*- coding: utf-8 -*-
"""ahp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3tGaGfA6Vwos5OvI-WVCa_7mq9Ohl5E
"""

import numpy as np
import pandas as pd
import math

df = pd.read_csv("/content/Parameters.csv")
no_of_resp = len(df. index)
df.head()

arr = np.empty((no_of_resp,8,8), float)
arr.shape

from os import scandir
from numpy.core.shape_base import vstack
rr = abs(df['Reliability']-df['Reliability'])+1
rps = abs(df['Reliability']-df['Partnership'])+1
rv = abs(df['Reliability']-df['Value_for_money'])+1
rs = abs(df['Reliability']-df['Supplier_quality'])+1
rf = abs(df['Reliability']-df['Speed_and_Flexibility'])+1
rt = abs(df['Reliability']-df['Strong_Service'])+1
rc = abs(df['Reliability']-df['Clear_communication'])+1
rp = abs(df['Reliability']-df['Production_Capabilities'])+1
psps = abs(df['Partnership']-df['Partnership'])+1
psv = abs(df['Partnership']-df['Value_for_money'])+1
pss = abs(df['Partnership']-df['Supplier_quality'])+1
psf = abs(df['Partnership']-df['Speed_and_Flexibility'])+1
pst = abs(df['Partnership']-df['Strong_Service'])+1
psc = abs(df['Partnership']-df['Clear_communication'])+1
psp = abs(df['Partnership']-df['Production_Capabilities'])+1
vv = abs(df['Value_for_money']-df['Value_for_money'])+1
vs = abs(df['Value_for_money']-df['Supplier_quality'])+1
vf = abs(df['Value_for_money']-df['Speed_and_Flexibility'])+1
vt = abs(df['Value_for_money']-df['Strong_Service'])+1
vc = abs(df['Value_for_money']-df['Clear_communication'])+1
vp = abs(df['Value_for_money']-df['Production_Capabilities'])+1
ss = abs(df['Supplier_quality']-df['Supplier_quality'])+1
sf = abs(df['Supplier_quality']-df['Speed_and_Flexibility'])+1
st = abs(df['Supplier_quality']-df['Strong_Service'])+1
sc = abs(df['Supplier_quality']-df['Clear_communication'])+1
sp = abs(df['Supplier_quality']-df['Production_Capabilities'])+1
ff = abs(df['Speed_and_Flexibility']-df['Speed_and_Flexibility'])+1
ft = abs(df['Speed_and_Flexibility']-df['Strong_Service'])+1
fc = abs(df['Speed_and_Flexibility']-df['Clear_communication'])+1
fp = abs(df['Speed_and_Flexibility']-df['Production_Capabilities'])+1
tt = abs(df['Strong_Service']-df['Strong_Service'])+1
tc = abs(df['Strong_Service']-df['Clear_communication'])+1
tp = abs(df['Strong_Service']-df['Production_Capabilities'])+1
cc = abs(df['Clear_communication']-df['Clear_communication'])+1
cp = abs(df['Clear_communication']-df['Production_Capabilities'])+1
pp = abs(df['Production_Capabilities']-df['Production_Capabilities'])+1
psr = 1/rps
vr = 1/rv
sr = 1/rs
fr = 1/rf
tr = 1/rt
cr = 1/rc
pr = 1/rp
sv = 1/vs
fv = 1/vf
tv = 1/vt
cv = 1/vc
pv = 1/vp
fs = 1/sf
ts = 1/st
cs = 1/sc
ps = 1/sp
tf = 1/ft
cf = 1/fc
pf = 1/fp
ct = 1/tc
pt = 1/tp
pc = 1/cp
vps = 1/psv
sps = 1/pss
fps = 1/psf
tps = 1/pst
cps = 1/psc
pps = 1/psp

for k in range(no_of_resp):
  arr[k][0][0] = rr[k]
  arr[k][0][1] = rps[k]
  arr[k][0][2] = rv[k]
  arr[k][0][3] = rs[k]
  arr[k][0][4] = rf[k]
  arr[k][0][5] = rt[k]
  arr[k][0][6] = rc[k]
  arr[k][0][7] = rp[k]
  arr[k][1][0] = psr[k]
  arr[k][1][1] = psps[k]
  arr[k][1][2] = psv[k]
  arr[k][1][3] = pss[k]
  arr[k][1][4] = psf[k]
  arr[k][1][5] = pst[k]
  arr[k][1][6] = psc[k]
  arr[k][1][7] = psp[k]
  arr[k][2][0] = vr[k]
  arr[k][2][1] = vps[k]
  arr[k][2][2] = vv[k]
  arr[k][2][3] = vs[k]
  arr[k][2][4] = vf[k]
  arr[k][2][5] = vt[k]
  arr[k][2][6] = vc[k]
  arr[k][2][7] = vp[k]
  arr[k][3][0] = sr[k]
  arr[k][3][1] = sps[k]
  arr[k][3][2] = sv[k]
  arr[k][3][3] = ss[k]
  arr[k][3][4] = sf[k]
  arr[k][3][5] = st[k]
  arr[k][3][6] = sc[k]
  arr[k][3][7] = sp[k]
  arr[k][4][0] = fr[k]
  arr[k][4][1] = fps[k]
  arr[k][4][2] = fv[k]
  arr[k][4][3] = fs[k]
  arr[k][4][4] = ff[k]
  arr[k][4][5] = ft[k]
  arr[k][4][6] = fc[k]
  arr[k][4][7] = fp[k]
  arr[k][5][0] = tr[k]
  arr[k][5][1] = tps[k]
  arr[k][5][2] = tv[k]
  arr[k][5][3] = ts[k]
  arr[k][5][4] = tf[k]
  arr[k][5][5] = tt[k]
  arr[k][5][6] = tc[k]
  arr[k][5][7] = tp[k]
  arr[k][6][0] = cr[k]
  arr[k][6][1] = cps[k]
  arr[k][6][2] = cv[k]
  arr[k][6][3] = cs[k]
  arr[k][6][4] = cf[k]
  arr[k][6][5] = ct[k]
  arr[k][6][6] = cc[k]
  arr[k][6][7] = cp[k]
  arr[k][7][0] = pr[k]
  arr[k][7][1] = pps[k]
  arr[k][7][2] = pv[k]
  arr[k][7][3] = ps[k]
  arr[k][7][4] = pf[k]
  arr[k][7][5] = pt[k]
  arr[k][7][6] = pc[k]
  arr[k][7][7] = pp[k]

print(arr[0])

arr2 = np.empty((no_of_resp,8,8), float)
arr2 = arr

#normalising values
n_sum = np.empty((no_of_resp,8), float)
for i in range(no_of_resp):
  n_sum[i] = np.sum(arr[i], axis=0)
print(n_sum[0])

"""#normalising values
n_sum = np.empty((no_of_resp,8), float)
for k in range(no_of_resp):
  for i in range(8):
    for j in range(8):
      n_sum[k][i] += arr[k][j][i]
print(n_sum[2])"""

#normalised matrix
for k in range(no_of_resp):
  for i in range(8):
    for j in range(8):
      arr[k][j][i] = arr[k][j][i]/n_sum[k][i]
print(arr[0])

#criteria weights
c_sum = np.empty((no_of_resp,8), float)
for k in range(no_of_resp):
  for i in range(8):
    for j in range(8):
      c_sum[k][i] += arr[k][i][j]
      if(math.isnan(c_sum[k][i])):
        c_sum[k][i] = 0.00000001
print(c_sum[0])

#calculating average criteria weights for all decisions
avg_wt = np.empty(8, float)
for k in range(8):
  for i in range(no_of_resp):
    avg_wt[k] += np.average(c_sum[i][k])
print(avg_wt)

dict_index = {
    avg_wt[0] : "Reliability",
    avg_wt[1] : "Partnership",
    avg_wt[2] : "Value_for_money",
    avg_wt[3] : "Supplier_quality",
    avg_wt[4] : "Speed_and_Flexibility",
    avg_wt[5] : "Strong_Service",
    avg_wt[6] : "Clear_communication",
    avg_wt[7] : "Production_Capabilities"
}

x = np.sort(avg_wt)[::-1]
print(x)

#printing 
for i in range(8):
  print(dict_index[x[i]])

sdf = pd.read_excel("/content/Supplier list.xlsx")
no_of_suppl = len(sdf. index)
print(no_of_suppl)
sdf.head()

alt_arr = np.empty(5, float)
sdf['Weighted_sum'] = (sdf['Reliability']*avg_wt[0])+(sdf['Partnership']*avg_wt[1])+(sdf['Value_for_money']*avg_wt[2])+(sdf['Supplier_quality']*avg_wt[3])+(sdf['Speed_and_Flexibility']*avg_wt[4])+(sdf['Strong_Service']*avg_wt[5])+(sdf['Clear_communication']*avg_wt[6])+(sdf['Production_Capabilities']*avg_wt[7])
sdf.head()

alt_array = sdf['Weighted_sum'].to_numpy()
alt_order = np.empty(5, float)
print(alt_array)

dict_index_alt = {
    alt_array[0] : "Blue dog",
    alt_array[1] : "Flying squirrel",
    alt_array[2] : "Quality five",
    alt_array[3] : "Star provisioners",
    alt_array[4] : "Lavender ocean"
}

y = np.sort(alt_array)[::-1]
print(y)

#printing 
for i in reversed(range(5)):
  print(dict_index_alt[y[i]])

